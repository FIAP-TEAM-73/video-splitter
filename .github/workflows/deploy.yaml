name: Deploy to AWS
run-name: Deployment for Order API to AWS EKS on branch ${{ github.head_ref }} by @${{ github.actor }}
on:
  push:
    branches:
      - RELEASE/*
      - main
  pull_request:
env: 
  ECR_REPO_NAME: andersonacdm/video-processing
  DB_USER: ${{ secrets.VIDEO_PROCESSING_DB_USER }}
  DB_PASSWORD: ${{ secrets.VIDEO_PROCESSING_DB_PASSWORD }}
  DB_NAME: ${{ secrets.VIDEO_PROCESSING_DB_NAME }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASS: ${{ secrets.SMTP_PASS }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Preparando Ambiente
        run: |
          sudo apt update -y
          sudo apt install nodejs -y
          sudo npm install
      - name: Building
        run: npm run build
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Preparando Ambiente
        run: |
          sudo apt update -y
          sudo apt install nodejs -y
          sudo npm install
      - name: testing
        run: npm run test:verbose
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/lcov.info
  sonarcloud:
    needs: [tests, build]
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
  deploy:
    needs: [tests, build]
    runs-on: ubuntu-latest
    #if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/RELEASE/')) && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Install tar and xz-utils
        run: sudo apt-get update && sudo apt-get install -y tar xz-utils

      - name: Download FFmpeg
        run: |
          mkdir -p bin
          curl -L -o bin/ffmpeg-release.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          
          echo Verify file exists before extraction
          if [ ! -f bin/ffmpeg-release.tar.xz ]; then
            echo "Download failed! Exiting..."
            exit 1
          fi

          echo Extract files
          tar -xvf bin/ffmpeg-release.tar.xz -C bin --strip-components=1

          echo Make FFmpeg executable
          chmod +x bin/ffmpeg
      - name: Splitting branch name
        id: docker-tag
        shell: bash
        env:
          BRANCH: ${{ github.ref }}
        run: |
          echo BRANCH=$BRANCH
          if [ "$BRANCH" != "main" ]; then
            split=(${BRANCH//\// })
            index=$((${#split[@]}-1))
            DOCKER_TAG=${split[$index]}
            echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV
          else
            DOCKER_TAG="latest"
            echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV
          fi
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
  
      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-publish
      #   shell: bash
      #   env:
      #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #       ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
      #       IMAGE_TAG: ${{env.DOCKER_TAG}}
      #   run: |
      #       docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
      #       docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #       echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
      #       echo "image_tag=$IMAGE_TAG" 
      #       echo FULL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG >> $GITHUB_ENV
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Install Dependencies
        run: npm ci && npm install -g serverless && echo "$(npm root -g)/.bin" >> $GITHUB_PATH

      - name: Check Serverless Version
        run: serverless --version
      - name: Debug Environment Variables
        run: |
          echo "DB_USER=${{ env.DB_USER }}"
          echo "DB_PASS=${{ env.DB_PASS }}"
          echo "DB_NAME=${{ env.DB_NAME }}"
          echo "SMTP_HOST=${{ env.SMTP_HOST }}"
          echo "SMTP_USER=${{ env.SMTP_USER }}"
          echo "SMTP_PASS=${{ env.SMTP_PASS }}"
          echo "FULL_IMAGE=${{ env.FULL_IMAGE }}"
      - name: Deploy with Serverless
        run: serverless deploy --debug --conceal \
          --param="db_user=${{ env.DB_USER }}" \
          --param="db_password=${{ env.DB_PASSWORD }}" \
          --param="db_name=${{ env.DB_NAME }}" \
          --param="smtp_host=${{ env.SMTP_HOST }}" \
          --param="smtp_user=${{ env.SMTP_USER }}" \
          --param="smtp_pass=${{ env.SMTP_PASS }}" \
          --param="image_uri=969036274708.dkr.ecr.us-east-1.amazonaws.com/andersonacdm/video-processing:merge"
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}